// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User and Workspace Models
// -----------------------------------------------------------------------------

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownedWorkspace Workspace? @relation("OwnedWorkspace") // Workspace this user owns

  // Link to the single workspace this user belongs to (as owner or member)
  workspaceId     String?
  workspace       Workspace? @relation("WorkspaceMembers", fields: [workspaceId], references: [id])
  roleInWorkspace Role? // User's role in that workspace
  emailVerified   Boolean
  image           String?
  sessions        Session[]
  accounts        Account[]

  @@map("user")
}

model Workspace {
  id               String   @id @default(cuid())
  name             String
  promptUsageCount Int      @default(0) // Example of a workspace-specific counter
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  ownerId String @unique // ID of the User who owns this workspace
  owner   User   @relation("OwnedWorkspace", fields: [ownerId], references: [id])

  users User[] @relation("WorkspaceMembers") // All users belonging to this workspace
  sites Site[] // Sites belonging to this workspace
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

// Site and Related Content Models
// -----------------------------------------------------------------------------

model Site {
  id          String @id @default(cuid())
  subdomain   String @unique
  name        String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  githubRepoUrl    String?
  vercelProjectUrl String?

  // Relation to Workspace
  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  // Site Content Relations
  themeId String? @unique
  theme   Theme?  @relation(fields: [themeId], references: [id])

  contactId String?  @unique
  contact   Contact? @relation(fields: [contactId], references: [id])

  socialMediaId String?      @unique
  socialMedia   SocialMedia? @relation(fields: [socialMediaId], references: [id])

  heroId String? @unique
  hero   Hero?   @relation(fields: [heroId], references: [id])

  services Service[]
}

model Theme {
  id             String @id @default(cuid())
  primaryColor   String
  secondaryColor String
  site           Site?
}

model Contact {
  id           String   @id @default(cuid())
  address      String?
  city         String?
  phone        String?
  email        String?
  workingHours String?
  areas        String[]
  site         Site?
}

model Service {
  id          String @id @default(cuid())
  title       String
  description String
  price       String
  site        Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId      String
}

model SocialMedia {
  id        String  @id @default(cuid())
  facebook  String?
  instagram String?
  linkedin  String?
  site      Site?
}

model Hero {
  id           String   @id @default(cuid())
  mainTitle    String?
  subtitle     String?
  highlights   String[]
  ctaPrimary   String?
  ctaSecondary String?
  site         Site?
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
